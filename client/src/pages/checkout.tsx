import { useState, useEffect } from 'react';
import { Link } from 'wouter';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { 
  ArrowLeft, MapPin, Calendar, Clock, CreditCard, 
  Smartphone, Wallet, Truck, Shield, CheckCircle, Plus, Home, Building, Check
} from 'lucide-react';
import { useCart } from '@/components/cart-context';
import { useAuth } from '@/hooks/use-auth';
import { formatPrice, generateOrderNumber, calculateDeliveryDate } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { addressSchema } from '@shared/schema';

// Client-side address schema without id (generated by server)
const clientAddressSchema = addressSchema.omit({ id: true });

const checkoutSchema = z.object({
  // Delivery Options
  deliveryDate: z.string().min(1, 'Delivery date is required'),
  deliveryTime: z.string().min(1, 'Delivery time is required'),
  deliveryOccasion: z.string().optional(),
  relation: z.string().optional(),
  senderName: z.string().optional(),
  
  // Payment
  paymentMethod: z.string().min(1, 'Payment method is required'),
  
  // Guest checkout fields (when not authenticated)
  guestName: z.string().optional(),
  guestPhone: z.string().optional(),
  guestEmail: z.string().optional().refine((val) => !val || z.string().email().safeParse(val).success, {
    message: 'Invalid email address'
  }),
  guestAddress: z.string().optional(),
  guestPincode: z.string().optional(),
  guestCity: z.string().optional(),
  guestLandmark: z.string().optional(),
  
  // Optional
  specialInstructions: z.string().optional(),
}).refine((data) => {
  // Validate guest fields when not using saved address
  return true; // We'll handle this validation separately
});

type CheckoutForm = z.infer<typeof checkoutSchema>;
type AddressForm = z.infer<typeof clientAddressSchema>;

export default function CheckoutPage() {
  const { state: cartState, dispatch } = useCart();
  const { isAuthenticated } = useAuth();
  const [isPlacingOrder, setIsPlacingOrder] = useState(false);
  const [orderPlaced, setOrderPlaced] = useState(false);
  const [orderNumber, setOrderNumber] = useState('');
  const [selectedAddress, setSelectedAddress] = useState<any>(null);
  const [useGuestCheckout, setUseGuestCheckout] = useState(!isAuthenticated);
  const [showAddAddressDialog, setShowAddAddressDialog] = useState(false);
  const [walletBalance, setWalletBalance] = useState(0);
  const [useWalletPayment, setUseWalletPayment] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch user addresses if authenticated
  const { data: addressesData } = useQuery({
    queryKey: ['/api/auth/addresses'],
    queryFn: async () => {
      const res = await apiRequest('/api/auth/addresses', 'GET');
      return res.json();
    },
    enabled: isAuthenticated
  });

  const addresses = addressesData || [];

  // Fetch wallet balance for authenticated users
  const { data: walletData } = useQuery({
    queryKey: ['/api/wallet/balance'],
    queryFn: async () => {
      const res = await apiRequest('/api/wallet/balance', 'GET');
      return res.json();
    },
    enabled: isAuthenticated
  });

  // Update wallet balance when data changes
  useEffect(() => {
    if (walletData?.balance !== undefined) {
      setWalletBalance(walletData.balance);
    }
  }, [walletData]);

  // Address form for adding new addresses
  const addressForm = useForm<AddressForm>({
    resolver: zodResolver(clientAddressSchema),
    defaultValues: {
      name: '',
      type: 'home',
      address: '',
      pincode: '',
      city: 'Gurgaon',
      landmark: '',
      isDefault: false
    }
  });

  // Helper function to check if a time slot is available for today
  const isTimeSlotAvailable = (deliveryDate: string, timeSlot: string) => {
    const today = new Date().toISOString().split('T')[0];
    const now = new Date();
    const currentHour = now.getHours();
    
    // If delivery date is not today, all time slots are available
    if (deliveryDate !== today) {
      return true;
    }
    
    // For same-day delivery, check current time (3-hour slots from 9am to 9pm)
    switch (timeSlot) {
      case 'slot1': // 9 AM - 12 PM
        return currentHour < 9;
      case 'slot2': // 12 PM - 3 PM  
        return currentHour < 12;
      case 'slot3': // 3 PM - 6 PM
        return currentHour < 15;
      case 'slot4': // 6 PM - 9 PM
        return currentHour < 18;
      case 'midnight': // 11:30 PM - 12:30 AM (₹250 charge)
        return currentHour < 21; // Allow midnight only if before 9 PM (2.5 hours advance)
      default:
        return true;
    }
  };

  // Get minimum delivery date (today or tomorrow based on current time)
  const getMinDeliveryDate = () => {
    const now = new Date();
    const currentHour = now.getHours();
    
    // If it's past 6 PM, next available delivery is tomorrow
    if (currentHour >= 18) {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      return tomorrow.toISOString().split('T')[0];
    }
    
    return now.toISOString().split('T')[0];
  };

  const form = useForm<CheckoutForm>({
    resolver: zodResolver(checkoutSchema),
    defaultValues: {
      deliveryDate: getMinDeliveryDate(),
      deliveryTime: 'slot3',
      deliveryOccasion: '',
      relation: '',
      senderName: '',
      paymentMethod: 'upi',
      guestCity: 'Gurgaon',
      guestName: '',
      guestPhone: '',
      guestEmail: '',
      guestAddress: '',
      guestPincode: '',
      guestLandmark: ''
    }
  });

  // Watch delivery date changes to update available time slots
  const selectedDate = form.watch('deliveryDate');
  
  // Auto-select first available time slot when date changes
  useEffect(() => {
    const timeSlots = ['slot1', 'slot2', 'slot3', 'slot4', 'midnight'];
    const currentTimeSlot = form.getValues('deliveryTime');
    
    // If current time slot is not available for selected date, pick first available
    if (!isTimeSlotAvailable(selectedDate, currentTimeSlot)) {
      const firstAvailableSlot = timeSlots.find(slot => isTimeSlotAvailable(selectedDate, slot));
      if (firstAvailableSlot) {
        form.setValue('deliveryTime', firstAvailableSlot);
      }
    }
  }, [selectedDate, form]);

  // Add address mutation
  const addAddressMutation = useMutation({
    mutationFn: async (data: AddressForm) => {
      console.log('Making API request with data:', data);
      const res = await apiRequest('/api/auth/addresses', 'POST', data);
      console.log('API response status:', res.status);
      if (!res.ok) {
        const errorText = await res.text();
        console.error('API error response:', errorText);
        throw new Error(errorText);
      }
      const result = await res.json();
      console.log('API response data:', result);
      return result;
    },
    onSuccess: (newAddress) => {
      console.log('Address saved successfully:', newAddress);
      queryClient.invalidateQueries({ queryKey: ['/api/auth/addresses'] });
      setShowAddAddressDialog(false);
      setSelectedAddress(newAddress);
      addressForm.reset();
      toast({
        title: "Address added",
        description: "Your new address has been saved and selected."
      });
    },
    onError: (error: any) => {
      console.error('Address save error:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to save address",
        variant: "destructive"
      });
    }
  });

  const getAddressIcon = (type: string) => {
    switch (type) {
      case 'home':
        return <Home className="h-4 w-4" />;
      case 'work':
        return <Building className="h-4 w-4" />;
      default:
        return <MapPin className="h-4 w-4" />;
    }
  };

  const onSubmitAddress = (data: AddressForm) => {
    console.log('Submitting address data:', data);
    addAddressMutation.mutate(data);
  };

  const subtotal = cartState.total;
  const deliveryFee = subtotal >= 500 ? 0 : 50;
  
  // Watch delivery time changes to calculate midnight delivery charge
  const selectedDeliveryTime = form.watch('deliveryTime');
  const midnightDeliveryCharge = selectedDeliveryTime === 'midnight' ? 250 : 0;
  const total = subtotal + deliveryFee + midnightDeliveryCharge;

  const createOrderMutation = useMutation({
    mutationFn: async (orderData: any) => {
      console.log('Sending order data:', JSON.stringify(orderData, null, 2));
      const response = await apiRequest('/api/orders', 'POST', orderData);
      if (!response.ok) {
        const errorData = await response.text();
        console.error('Order API error response:', errorData);
        console.error('Order API error status:', response.status);
        throw new Error(`Order failed: ${response.status} - ${errorData}`);
      }
      return response.json();
    },
    onSuccess: (data) => {
      setOrderNumber(data.orderNumber);
      setOrderPlaced(true);
      dispatch({ type: 'CLEAR_CART' });
      toast({
        title: "Order placed successfully!",
        description: `Your order ${data.orderNumber} has been confirmed.`,
      });
    },
    onError: (error) => {
      console.error('Order mutation error:', error);
      toast({
        title: "Order failed",
        description: error.message || "Failed to place order. Please try again.",
        variant: "destructive"
      });
    }
  });

  const onSubmit = async (data: CheckoutForm) => {
    console.log('=== CHECKOUT FORM SUBMISSION ===');
    console.log('Form data:', data);
    console.log('Cart state:', cartState);
    console.log('Is authenticated:', isAuthenticated);
    console.log('Use guest checkout:', useGuestCheckout);
    console.log('Selected address:', selectedAddress);
    
    setIsPlacingOrder(true);
    
    // Validate time slot availability
    if (!isTimeSlotAvailable(data.deliveryDate, data.deliveryTime)) {
      toast({
        title: "Invalid delivery time",
        description: "The selected time slot is not available for the chosen date. Please select a different time.",
        variant: "destructive"
      });
      setIsPlacingOrder(false);
      return;
    }
    
    // Determine delivery address
    let deliveryAddress;
    if (isAuthenticated && !useGuestCheckout && selectedAddress) {
      // Use selected saved address - get phone from user profile if not in address
      const userResponse = await apiRequest('/api/profile', 'GET');
      const userData = await userResponse.json();
      
      deliveryAddress = {
        name: selectedAddress.name,
        phone: selectedAddress.phone || userData.phone || '',
        address: selectedAddress.address,
        pincode: selectedAddress.pincode,
        city: selectedAddress.city,
        landmark: selectedAddress.landmark || ''
      };
    } else if (isAuthenticated && !useGuestCheckout && !selectedAddress) {
      // No address selected when using saved addresses
      if (showAddAddressDialog) {
        toast({
          title: "Complete address first",
          description: "Please finish adding your new address or cancel to select from existing addresses",
          variant: "destructive"
        });
      } else {
        toast({
          title: "No address selected",
          description: "Please select a delivery address or switch to guest checkout",
          variant: "destructive"
        });
      }
      setIsPlacingOrder(false);
      return;
    } else {
      // Guest checkout - validate all fields
      if (!data.guestName || !data.guestPhone || !data.guestAddress || !data.guestPincode || !data.guestCity) {
        toast({
          title: "Missing delivery details",
          description: "Please fill in all delivery address fields",
          variant: "destructive"
        });
        setIsPlacingOrder(false);
        return;
      }
      
      deliveryAddress = {
        name: data.guestName,
        phone: data.guestPhone,
        email: data.guestEmail,
        address: data.guestAddress,
        pincode: data.guestPincode,
        city: data.guestCity,
        landmark: data.guestLandmark
      };
    }
    
    // Calculate wallet usage for partial payments
    let walletAmountUsed = 0;
    let remainingAmount = total;
    
    if (useWalletPayment && isAuthenticated && walletBalance > 0) {
      // Use up to 10% of order value from wallet
      walletAmountUsed = Math.min(walletBalance, total * 0.1);
      remainingAmount = total - walletAmountUsed;
    }

    const orderData = {
      items: cartState.items.map(item => ({
        cakeId: item.cake.id,
        name: item.cake.name,
        quantity: item.quantity,
        weight: item.weight,
        flavor: item.flavor,
        customMessage: item.customMessage,
        price: item.price,
        photoCustomization: item.photoCustomization ? {
          uploadedImage: item.photoCustomization.uploadedImage,
          customText: item.photoCustomization.customText,
          imagePosition: item.photoCustomization.imagePosition,
          textPosition: item.photoCustomization.textPosition,
          imageSize: item.photoCustomization.imageSize,
          backgroundImage: item.cake?.backgroundImage
        } : undefined,
        addons: item.addons.map(addon => ({
          id: addon.addon.id,
          name: addon.addon.name,
          price: parseFloat(addon.addon.price),
          quantity: addon.quantity
        }))
      })),
      subtotal: subtotal.toString(),
      deliveryFee: deliveryFee.toString(),
      total: total.toString(),
      deliveryAddress,
      deliveryDate: data.deliveryDate,
      deliveryTime: data.deliveryTime,
      deliveryOccasion: data.deliveryOccasion,
      relation: data.relation,
      senderName: data.senderName,
      paymentMethod: useWalletPayment && walletAmountUsed > 0 ? 'partial_wallet' : data.paymentMethod,
      specialInstructions: data.specialInstructions,
      status: 'pending',
      paymentStatus: data.paymentMethod === 'cod' ? 'pending' : 'paid',
      walletAmountUsed: walletAmountUsed.toString(),
      remainingAmount: remainingAmount.toString()
    };

    createOrderMutation.mutate(orderData);
    setIsPlacingOrder(false);
  };

  if (cartState.items.length === 0 && !orderPlaced) {
    return (
      <div className="min-h-screen bg-cream flex items-center justify-center">
        <Card className="p-8 text-center">
          <h1 className="text-2xl font-bold text-charcoal mb-4">No Items to Checkout</h1>
          <p className="text-charcoal opacity-70 mb-6">Your cart is empty. Add some cakes first!</p>
          <Link href="/category/all">
            <Button className="bg-caramel hover:bg-brown">Start Shopping</Button>
          </Link>
        </Card>
      </div>
    );
  }

  if (orderPlaced) {
    return (
      <div className="min-h-screen bg-cream">
        <div className="container mx-auto px-4 py-16">
          <Card className="max-w-2xl mx-auto text-center p-8">
            <div className="text-6xl mb-6">🎉</div>
            <h1 className="text-3xl font-bold text-charcoal mb-4">Order Confirmed!</h1>
            <p className="text-lg text-charcoal opacity-70 mb-6">
              Thank you for your order. We'll start preparing your delicious cake right away!
            </p>
            
            <Card className="bg-mint/10 border-mint/20 p-6 mb-8">
              <h3 className="font-semibold text-charcoal mb-2">Order Details</h3>
              <p className="text-2xl font-bold text-brown mb-2">{orderNumber}</p>
              <p className="text-sm text-charcoal opacity-70">
                You'll receive SMS and email updates about your order status.
              </p>
            </Card>

            <div className="space-y-4">
              <Link href={`/track-order/${orderNumber}`}>
                <Button size="lg" className="bg-brown text-white hover:bg-opacity-90">
                  Track Your Order
                </Button>
              </Link>
              <div>
                <Link href="/category/all">
                  <Button variant="outline" size="lg" className="border-caramel text-caramel hover:bg-caramel hover:text-white">
                    Order More Cakes
                  </Button>
                </Link>
              </div>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-cream">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center space-x-4">
            <Link href="/cart">
              <Button variant="ghost" size="icon">
                <ArrowLeft className="h-5 w-5" />
              </Button>
            </Link>
            <h1 className="text-2xl font-bold text-charcoal">Checkout</h1>
            <Badge variant="secondary" className="bg-caramel text-white">
              {cartState.itemCount} {cartState.itemCount === 1 ? 'item' : 'items'}
            </Badge>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8">
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <div className="grid lg:grid-cols-3 gap-8">
            {/* Checkout Form */}
            <div className="lg:col-span-2 space-y-6">
              {/* Delivery Address */}
              <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center">
                      <MapPin className="mr-2 h-5 w-5 text-caramel" />
                      Delivery Address
                    </CardTitle>
                  </div>
                  {isAuthenticated && (
                    <div className="flex items-center space-x-2">
                      <button
                        type="button"
                        onClick={() => setUseGuestCheckout(!useGuestCheckout)}
                        className="text-sm text-caramel hover:underline"
                      >
                        {useGuestCheckout ? 'Use Saved Address' : 'Use Guest Checkout'}
                      </button>
                    </div>
                  )}
                </CardHeader>
                <CardContent className="space-y-4">
                  {isAuthenticated && !useGuestCheckout ? (
                    /* Saved Addresses Selection */
                    <div className="space-y-4">
                      {addresses.length > 0 ? (
                        <RadioGroup
                          value={selectedAddress?.id || ''}
                          onValueChange={(addressId) => {
                            const address = addresses.find((a: any) => a.id === addressId);
                            if (address) setSelectedAddress(address);
                          }}
                          className="space-y-3"
                        >
                          {addresses.map((address: any) => (
                            <div key={address.id} className="relative">
                              <div className="flex items-center space-x-3 p-4 border rounded-lg hover:bg-gray-50 cursor-pointer">
                                <RadioGroupItem value={address.id} id={address.id} />
                                <Label htmlFor={address.id} className="flex-1 cursor-pointer">
                                  <div className="flex items-center gap-2 mb-2">
                                    {getAddressIcon(address.type)}
                                    <span className="font-medium">{address.name}</span>
                                    {address.isDefault && (
                                      <Badge variant="secondary" className="text-xs">Default</Badge>
                                    )}
                                  </div>
                                  <p className="text-sm text-charcoal opacity-80 mb-1">
                                    {address.address}
                                  </p>
                                  <p className="text-sm text-charcoal opacity-70">
                                    {address.city}, {address.pincode}
                                    {address.landmark && ` • ${address.landmark}`}
                                  </p>
                                </Label>
                                {selectedAddress?.id === address.id && (
                                  <Check className="h-5 w-5 text-green-600" />
                                )}
                              </div>
                            </div>
                          ))}
                        </RadioGroup>
                      ) : (
                        <div className="text-center py-8 text-charcoal opacity-70">
                          <MapPin className="h-12 w-12 mx-auto mb-4 opacity-30" />
                          <p className="mb-4">No saved addresses found</p>
                        </div>
                      )}
                      
                      {/* Add New Address Button */}
                      <Dialog open={showAddAddressDialog} onOpenChange={setShowAddAddressDialog}>
                        <DialogTrigger asChild>
                          <Button
                            type="button"
                            variant="outline"
                            className="w-full border-dashed border-caramel text-caramel hover:bg-caramel hover:text-white"
                          >
                            <Plus className="h-4 w-4 mr-2" />
                            Add New Address
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-md">
                          <DialogHeader>
                            <DialogTitle>Add New Address</DialogTitle>
                          </DialogHeader>
                          <Form {...addressForm}>
                            <form onSubmit={addressForm.handleSubmit(onSubmitAddress)} className="space-y-4">
                              <FormField
                                control={addressForm.control}
                                name="name"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Address Name</FormLabel>
                                    <FormControl>
                                      <Input {...field} placeholder="e.g., Home, Office" />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />

                              <FormField
                                control={addressForm.control}
                                name="type"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Address Type</FormLabel>
                                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                                      <FormControl>
                                        <SelectTrigger>
                                          <SelectValue placeholder="Select type" />
                                        </SelectTrigger>
                                      </FormControl>
                                      <SelectContent className="max-h-60 overflow-y-auto">
                                        <SelectItem value="home">Home</SelectItem>
                                        <SelectItem value="work">Work</SelectItem>
                                        <SelectItem value="other">Other</SelectItem>
                                      </SelectContent>
                                    </Select>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />

                              <FormField
                                control={addressForm.control}
                                name="address"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Complete Address</FormLabel>
                                    <FormControl>
                                      <Textarea {...field} placeholder="House/Flat number, Street name, Area" rows={3} />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />

                              <div className="grid grid-cols-2 gap-4">
                                <FormField
                                  control={addressForm.control}
                                  name="pincode"
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>Pincode</FormLabel>
                                      <FormControl>
                                        <Input {...field} placeholder="122004" maxLength={6} />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />

                                <FormField
                                  control={addressForm.control}
                                  name="city"
                                  render={({ field }) => (
                                    <FormItem>
                                      <FormLabel>City</FormLabel>
                                      <FormControl>
                                        <Input {...field} placeholder="Gurgaon" />
                                      </FormControl>
                                      <FormMessage />
                                    </FormItem>
                                  )}
                                />
                              </div>

                              <FormField
                                control={addressForm.control}
                                name="landmark"
                                render={({ field }) => (
                                  <FormItem>
                                    <FormLabel>Landmark (Optional)</FormLabel>
                                    <FormControl>
                                      <Input {...field} placeholder="Near Metro Station" />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />

                              <Button 
                                type="submit" 
                                disabled={addAddressMutation.isPending} 
                                className="w-full bg-caramel hover:bg-brown"
                              >
                                {addAddressMutation.isPending ? 'Saving...' : 'Save Address'}
                              </Button>
                            </form>
                          </Form>
                        </DialogContent>
                      </Dialog>
                    </div>
                  ) : (
                    /* Guest Checkout Form */
                    <div className="space-y-4">
                      <div className="grid md:grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="guestName">Full Name *</Label>
                          <Input
                            id="guestName"
                            {...form.register('guestName')}
                            placeholder="Enter your full name"
                          />
                          {form.formState.errors.guestName && (
                            <p className="text-sm text-red-500 mt-1">
                              {form.formState.errors.guestName.message}
                            </p>
                          )}
                        </div>
                        <div>
                          <Label htmlFor="guestPhone">Mobile Number *</Label>
                          <Input
                            id="guestPhone"
                            {...form.register('guestPhone')}
                            placeholder="Enter 10-digit mobile number"
                          />
                          {form.formState.errors.guestPhone && (
                            <p className="text-sm text-red-500 mt-1">
                              {form.formState.errors.guestPhone.message}
                            </p>
                          )}
                        </div>
                      </div>
                      
                      <div>
                        <Label htmlFor="guestEmail">Email Address (Optional)</Label>
                        <Input
                          id="guestEmail"
                          type="email"
                          {...form.register('guestEmail')}
                          placeholder="your.email@example.com"
                        />
                        {form.formState.errors.guestEmail && (
                          <p className="text-sm text-red-500 mt-1">
                            {form.formState.errors.guestEmail.message}
                          </p>
                        )}
                        <p className="text-sm text-gray-600 mt-1">
                          We'll send order confirmation and delivery updates to this email
                        </p>
                      </div>

                      <div>
                        <Label htmlFor="guestAddress">Complete Address *</Label>
                        <Textarea
                          id="guestAddress"
                          {...form.register('guestAddress')}
                          placeholder="House/Flat number, Street name, Area"
                          rows={3}
                        />
                        {form.formState.errors.guestAddress && (
                          <p className="text-sm text-red-500 mt-1">
                            {form.formState.errors.guestAddress.message}
                          </p>
                        )}
                      </div>

                      <div className="grid md:grid-cols-3 gap-4">
                        <div>
                          <Label htmlFor="guestPincode">Pincode *</Label>
                          <Input
                            id="guestPincode"
                            {...form.register('guestPincode')}
                            placeholder="122004"
                            maxLength={6}
                          />
                          {form.formState.errors.guestPincode && (
                            <p className="text-sm text-red-500 mt-1">
                              {form.formState.errors.guestPincode.message}
                            </p>
                          )}
                        </div>
                        <div>
                          <Label htmlFor="guestCity">City *</Label>
                          <Input
                            id="guestCity"
                            {...form.register('guestCity')}
                            placeholder="Gurgaon"
                          />
                          {form.formState.errors.guestCity && (
                            <p className="text-sm text-red-500 mt-1">
                              {form.formState.errors.guestCity.message}
                            </p>
                          )}
                        </div>
                        <div>
                          <Label htmlFor="guestLandmark">Landmark (Optional)</Label>
                          <Input
                            id="guestLandmark"
                            {...form.register('guestLandmark')}
                            placeholder="Near metro station"
                          />
                        </div>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Delivery Options */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Calendar className="mr-2 h-5 w-5 text-caramel" />
                    Delivery Options
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="deliveryDate">Date *</Label>
                      <Input
                        id="deliveryDate"
                        type="date"
                        {...form.register('deliveryDate')}
                        min={getMinDeliveryDate()}
                      />
                      {form.formState.errors.deliveryDate && (
                        <p className="text-sm text-red-500 mt-1">
                          {form.formState.errors.deliveryDate.message}
                        </p>
                      )}
                    </div>
                    <div>
                      <Label>Delivery Time *</Label>
                      <Select onValueChange={(value) => form.setValue('deliveryTime', value)} value={form.watch('deliveryTime')}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select time slot" />
                        </SelectTrigger>
                        <SelectContent className="max-h-60 overflow-y-auto">
                          <SelectItem 
                            value="slot1" 
                            disabled={!isTimeSlotAvailable(selectedDate, 'slot1')}
                          >
                            9 AM - 12 PM
                            {!isTimeSlotAvailable(selectedDate, 'slot1') && (
                              <span className="text-red-500 text-xs ml-2">(Not available)</span>
                            )}
                          </SelectItem>
                          <SelectItem 
                            value="slot2" 
                            disabled={!isTimeSlotAvailable(selectedDate, 'slot2')}
                          >
                            12 PM - 3 PM
                            {!isTimeSlotAvailable(selectedDate, 'slot2') && (
                              <span className="text-red-500 text-xs ml-2">(Not available)</span>
                            )}
                          </SelectItem>
                          <SelectItem 
                            value="slot3" 
                            disabled={!isTimeSlotAvailable(selectedDate, 'slot3')}
                          >
                            3 PM - 6 PM
                            {!isTimeSlotAvailable(selectedDate, 'slot3') && (
                              <span className="text-red-500 text-xs ml-2">(Not available)</span>
                            )}
                          </SelectItem>
                          <SelectItem 
                            value="slot4" 
                            disabled={!isTimeSlotAvailable(selectedDate, 'slot4')}
                          >
                            6 PM - 9 PM
                            {!isTimeSlotAvailable(selectedDate, 'slot4') && (
                              <span className="text-red-500 text-xs ml-2">(Not available)</span>
                            )}
                          </SelectItem>
                          <SelectItem 
                            value="midnight" 
                            disabled={!isTimeSlotAvailable(selectedDate, 'midnight')}
                          >
                            11:30 PM - 12:30 AM (₹250 delivery charge)
                            {!isTimeSlotAvailable(selectedDate, 'midnight') && (
                              <span className="text-red-500 text-xs ml-2">(Not available)</span>
                            )}
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      {form.formState.errors.deliveryTime && (
                        <p className="text-sm text-red-500 mt-1">
                          {form.formState.errors.deliveryTime.message}
                        </p>
                      )}
                      
                      {/* Time Slot Information */}
                      <div className="mt-2 text-xs text-charcoal opacity-70">
                        {selectedDate === new Date().toISOString().split('T')[0] && (
                          <p className="text-amber-600">
                            ⚠️ Same-day delivery: Some time slots may not be available based on current time
                          </p>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Additional Delivery Fields */}
                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <Label>Delivery Occasion</Label>
                      <Select onValueChange={(value) => form.setValue('deliveryOccasion', value)} value={form.watch('deliveryOccasion')}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select Occasion" />
                        </SelectTrigger>
                        <SelectContent className="max-h-60 overflow-y-auto">
                          <SelectItem value="birthday">Birthday</SelectItem>
                          <SelectItem value="anniversary">Anniversary</SelectItem>
                          <SelectItem value="wedding">Wedding</SelectItem>
                          <SelectItem value="engagement">Engagement</SelectItem>
                          <SelectItem value="valentine">Valentine's Day</SelectItem>
                          <SelectItem value="mothers-day">Mother's Day</SelectItem>
                          <SelectItem value="fathers-day">Father's Day</SelectItem>
                          <SelectItem value="graduation">Graduation</SelectItem>
                          <SelectItem value="promotion">Promotion</SelectItem>
                          <SelectItem value="new-job">New Job</SelectItem>
                          <SelectItem value="farewell">Farewell</SelectItem>
                          <SelectItem value="congratulations">Congratulations</SelectItem>
                          <SelectItem value="festival">Festival</SelectItem>
                          <SelectItem value="house-warming">House Warming</SelectItem>
                          <SelectItem value="retirement">Retirement</SelectItem>
                          <SelectItem value="baby-shower">Baby Shower</SelectItem>
                          <SelectItem value="get-well-soon">Get Well Soon</SelectItem>
                          <SelectItem value="apology">Apology</SelectItem>
                          <SelectItem value="thank-you">Thank You</SelectItem>
                          <SelectItem value="surprise">Surprise</SelectItem>
                          <SelectItem value="other">Other</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label>Relation</Label>
                      <Select onValueChange={(value) => form.setValue('relation', value)} value={form.watch('relation')}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select Relation" />
                        </SelectTrigger>
                        <SelectContent className="max-h-60 overflow-y-auto">
                          <SelectItem value="mother">Mother</SelectItem>
                          <SelectItem value="father">Father</SelectItem>
                          <SelectItem value="sister">Sister</SelectItem>
                          <SelectItem value="brother">Brother</SelectItem>
                          <SelectItem value="wife">Wife</SelectItem>
                          <SelectItem value="husband">Husband</SelectItem>
                          <SelectItem value="daughter">Daughter</SelectItem>
                          <SelectItem value="son">Son</SelectItem>
                          <SelectItem value="girlfriend">Girlfriend</SelectItem>
                          <SelectItem value="boyfriend">Boyfriend</SelectItem>
                          <SelectItem value="friend">Friend</SelectItem>
                          <SelectItem value="colleague">Colleague</SelectItem>
                          <SelectItem value="boss">Boss</SelectItem>
                          <SelectItem value="teacher">Teacher</SelectItem>
                          <SelectItem value="student">Student</SelectItem>
                          <SelectItem value="neighbor">Neighbor</SelectItem>
                          <SelectItem value="cousin">Cousin</SelectItem>
                          <SelectItem value="aunt">Aunt</SelectItem>
                          <SelectItem value="uncle">Uncle</SelectItem>
                          <SelectItem value="grandparents">Grandparents</SelectItem>
                          <SelectItem value="client">Client</SelectItem>
                          <SelectItem value="business-partner">Business Partner</SelectItem>
                          <SelectItem value="other">Other</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="senderName">Sender Name *</Label>
                    <Input
                      id="senderName"
                      {...form.register('senderName')}
                      placeholder="Enter sender name"
                    />
                    {form.formState.errors.senderName && (
                      <p className="text-sm text-red-500 mt-1">
                        {form.formState.errors.senderName.message}
                      </p>
                    )}
                  </div>

                  <div className="bg-mint/10 border border-mint/20 rounded-lg p-4">
                    <div className="flex items-center space-x-2 text-mint mb-2">
                      <Truck className="h-4 w-4" />
                      <span className="font-medium">Delivery Information</span>
                    </div>
                    <ul className="text-sm text-charcoal space-y-1">
                      <li>✓ Same-day delivery available for orders before 6 PM</li>
                      <li>✓ Midnight delivery available with 2-hour advance booking</li>
                      <li>✓ Temperature-controlled packaging for freshness</li>
                      <li>✓ Free delivery on orders above ₹500</li>
                    </ul>
                  </div>
                </CardContent>
              </Card>

              {/* Payment Method */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <CreditCard className="mr-2 h-5 w-5 text-caramel" />
                    Payment Method
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <RadioGroup 
                    onValueChange={(value) => form.setValue('paymentMethod', value)}
                    defaultValue="upi"
                    className="space-y-3"
                  >
                    <div className="flex items-center space-x-3 p-3 border rounded-lg">
                      <RadioGroupItem value="upi" id="upi" />
                      <Label htmlFor="upi" className="flex items-center space-x-2 cursor-pointer flex-1">
                        <Smartphone className="h-4 w-4 text-caramel" />
                        <span>UPI Payment (PhonePe, GPay, Paytm)</span>
                      </Label>
                    </div>
                    
                    <div className="flex items-center space-x-3 p-3 border rounded-lg">
                      <RadioGroupItem value="card" id="card" />
                      <Label htmlFor="card" className="flex items-center space-x-2 cursor-pointer flex-1">
                        <CreditCard className="h-4 w-4 text-caramel" />
                        <span>Credit/Debit Card</span>
                      </Label>
                    </div>
                    
                    <div className="flex items-center space-x-3 p-3 border rounded-lg">
                      <RadioGroupItem value="cod" id="cod" />
                      <Label htmlFor="cod" className="flex items-center space-x-2 cursor-pointer flex-1">
                        <Wallet className="h-4 w-4 text-caramel" />
                        <span>Cash on Delivery</span>
                      </Label>
                    </div>

                    {/* Partial Wallet Payment Option - Only show for authenticated users */}
                    {isAuthenticated && walletBalance > 0 && (
                      <div className="space-y-3 p-3 border rounded-lg bg-pink-50 border-pink-200">
                        <div className="flex items-center space-x-3">
                          <input
                            type="checkbox"
                            id="use-wallet"
                            checked={useWalletPayment}
                            onChange={(e) => setUseWalletPayment(e.target.checked)}
                            className="rounded border-gray-300 text-caramel focus:ring-caramel"
                          />
                          <Label htmlFor="use-wallet" className="flex items-center space-x-2 cursor-pointer flex-1">
                            <Wallet className="h-4 w-4 text-caramel" />
                            <span className="font-medium">Use Wallet Credits</span>
                          </Label>
                        </div>
                        
                        {useWalletPayment && (
                          <div className="ml-8 space-y-2">
                            <div className="text-sm text-gray-600">
                              <p>Available Balance: ₹{walletBalance.toFixed(2)}</p>
                              <p>Maximum Usable (10%): ₹{Math.min(walletBalance, cartState.total * 0.1).toFixed(2)}</p>
                            </div>
                            <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
                              <p className="text-sm text-blue-700 font-medium">
                                💡 You can use up to 10% of your order value from wallet credits
                              </p>
                              <div className="text-xs text-blue-600 mt-1">
                                Wallet: ₹{Math.min(walletBalance, cartState.total * 0.1).toFixed(2)} + 
                                Other Payment: ₹{(cartState.total - Math.min(walletBalance, cartState.total * 0.1)).toFixed(2)}
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </RadioGroup>
                  
                  {form.formState.errors.paymentMethod && (
                    <p className="text-sm text-red-500 mt-2">
                      {form.formState.errors.paymentMethod.message}
                    </p>
                  )}
                </CardContent>
              </Card>

              {/* Special Instructions */}
              <Card>
                <CardHeader>
                  <CardTitle>Special Instructions (Optional)</CardTitle>
                </CardHeader>
                <CardContent>
                  <Textarea
                    {...form.register('specialInstructions')}
                    placeholder="Any special instructions for delivery or cake preparation..."
                    rows={3}
                  />
                </CardContent>
              </Card>
            </div>

            {/* Order Summary */}
            <div className="space-y-6">
              {/* Order Items */}
              <Card>
                <CardHeader>
                  <CardTitle>Order Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {cartState.items.map((item) => (
                    <div key={item.id} className="space-y-2">
                      <div className="flex gap-3">
                        {item.customImage ? (
                          // Photo cake preview
                          <div className="relative w-12 h-12 bg-gray-100 rounded overflow-hidden border border-red-200">
                            <img 
                              src={(item.cake.images && item.cake.images[0]) || '/placeholder-cake.jpg'} 
                              alt={item.cake.name}
                              className="w-full h-full object-cover"
                            />
                            <div 
                              className="absolute rounded overflow-hidden border border-white"
                              style={{
                                left: `${item.imagePosition?.x || 50}%`,
                                top: `${item.imagePosition?.y || 40}%`,
                                width: `${((item.imageSize || 32) / 100) * 12}px`,
                                height: `${((item.imageSize || 32) / 100) * 12}px`,
                                transform: 'translate(-50%, -50%)'
                              }}
                            >
                              <img 
                                src={item.customImage} 
                                alt="Custom photo" 
                                className="w-full h-full object-cover"
                              />
                            </div>
                            {item.customMessage && (
                              <div 
                                className="absolute bg-white bg-opacity-90 px-0.5 py-0.5 rounded text-xs"
                                style={{
                                  left: `${item.textPosition?.x || 50}%`,
                                  top: `${item.textPosition?.y || 70}%`,
                                  transform: 'translate(-50%, -50%)',
                                  fontSize: '6px'
                                }}
                              >
                                {item.customMessage}
                              </div>
                            )}
                            <div className="absolute top-0 right-0 bg-red-500 text-white text-xs px-1 rounded-bl">📸</div>
                          </div>
                        ) : (
                          <img 
                            src={(item.cake.images && item.cake.images[0]) || '/placeholder-cake.jpg'} 
                            alt={item.cake.name}
                            className="w-12 h-12 object-cover rounded"
                          />
                        )}
                        <div className="flex-1">
                          <h4 className="font-medium text-charcoal text-sm">{item.cake.name}</h4>
                          <p className="text-xs text-charcoal opacity-70">
                            {item.weight} • {item.flavor} • Qty: {item.quantity}
                          </p>
                          {item.addons.length > 0 && (
                            <p className="text-xs text-charcoal opacity-60">
                              + {item.addons.length} add-on{item.addons.length > 1 ? 's' : ''}
                            </p>
                          )}
                        </div>
                        <div className="text-sm font-medium text-brown">
                          {formatPrice((item.price + item.addons.reduce((sum, addon) => 
                            sum + parseFloat(addon.addon.price) * addon.quantity, 0
                          )) * item.quantity)}
                        </div>
                      </div>
                      {/* Personalization Summary */}
                      {item.customImage && (
                        <div className="ml-15 p-2 bg-red-50 border border-red-200 rounded text-xs">
                          <span className="text-red-700 font-medium">📸 Personalized:</span>
                          <span className="text-red-600 ml-1">
                            Custom photo + {item.customMessage ? `"${item.customMessage}"` : 'positioned perfectly'}
                          </span>
                        </div>
                      )}
                    </div>
                  ))}
                </CardContent>
              </Card>

              {/* Price Breakdown */}
              <Card>
                <CardContent className="p-6 space-y-3">
                  <div className="flex justify-between">
                    <span className="text-charcoal">Subtotal</span>
                    <span className="font-medium">{formatPrice(subtotal)}</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-charcoal">Delivery Fee</span>
                    <span className="font-medium">
                      {deliveryFee === 0 ? (
                        <Badge className="bg-mint text-white text-xs">FREE</Badge>
                      ) : (
                        formatPrice(deliveryFee)
                      )}
                    </span>
                  </div>

                  {midnightDeliveryCharge > 0 && (
                    <div className="flex justify-between">
                      <span className="text-charcoal">Midnight Delivery</span>
                      <span className="font-medium text-orange-600">{formatPrice(midnightDeliveryCharge)}</span>
                    </div>
                  )}

                  <Separator />
                  
                  {/* Wallet Usage Breakdown */}
                  {useWalletPayment && walletBalance > 0 && (
                    <>
                      <div className="flex justify-between text-sm">
                        <span className="text-green-600">Wallet Credits Used</span>
                        <span className="font-medium text-green-600">
                          -{formatPrice(Math.min(walletBalance, total * 0.1))}
                        </span>
                      </div>
                      <div className="flex justify-between text-sm">
                        <span className="text-charcoal">Remaining to Pay</span>
                        <span className="font-medium">
                          {formatPrice(total - Math.min(walletBalance, total * 0.1))}
                        </span>
                      </div>
                      <Separator />
                    </>
                  )}
                  
                  <div className="flex justify-between text-lg font-bold">
                    <span className="text-charcoal">Total</span>
                    <span className="text-brown">{formatPrice(total)}</span>
                  </div>
                  <div className="text-xs text-charcoal opacity-60 text-center mt-1">
                    (Inclusive of GST)
                  </div>
                </CardContent>
              </Card>

              {/* Place Order Button */}
              <Button
                type="submit"
                size="lg"
                disabled={isPlacingOrder || createOrderMutation.isPending || showAddAddressDialog}
                className="w-full bg-brown text-white hover:bg-opacity-90"
                onClick={() => {
                  console.log('=== PLACE ORDER BUTTON CLICKED ===');
                  console.log('Form errors:', form.formState.errors);
                  console.log('Is form valid:', form.formState.isValid);
                  console.log('Button disabled state:', isPlacingOrder || createOrderMutation.isPending || showAddAddressDialog);
                }}
              >
                {isPlacingOrder || createOrderMutation.isPending ? (
                  'Placing Order...'
                ) : (
                  `Place Order - ${formatPrice(total)}`
                )}
              </Button>

              {/* Security Info */}
              <div className="bg-gray-50 rounded-lg p-4">
                <div className="flex items-center space-x-2 text-charcoal mb-2">
                  <Shield className="h-4 w-4 text-mint" />
                  <span className="font-medium text-sm">Secure Checkout</span>
                </div>
                <ul className="text-xs text-charcoal opacity-70 space-y-1">
                  <li>✓ SSL encrypted payment</li>
                  <li>✓ 100% secure data protection</li>
                  <li>✓ No card details stored</li>
                </ul>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
}
